# DASHBOARD T·ªîNG H·ª¢P - D·ª∞ B√ÅO CH·∫§T L∆Ø·ª¢NG KH√îNG KH√ç TP.HCM 2025
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

# C·∫•u h√¨nh matplotlib cho ti·∫øng Vi·ªát
plt.rcParams['figure.figsize'] = (20, 24)
plt.rcParams['font.size'] = 10
plt.style.use('default')

print("=== DASHBOARD T·ªîNG H·ª¢P - D·ª∞ B√ÅO CH·∫§T L∆Ø·ª¢NG KH√îNG KH√ç TP.HCM 2025 ===")

# 1. Load t·∫•t c·∫£ d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω
df = pd.read_csv("HealthyAir_HCMC.csv")
df['datetime'] = pd.to_datetime(df['date'], format='%d-%m-%Y %H:%M')

# AQI function v·ªõi ti·∫øng Vi·ªát
def get_aqi_level(pm25):
    if pm25 <= 12: return "T·ªët"
    elif pm25 <= 35.4: return "Trung b√¨nh" 
    elif pm25 <= 55.4: return "K√©m"
    else: return "Nguy h·∫°i"

df['AQI_Level'] = df['PM2.5'].apply(get_aqi_level)

# D·ª± b√°o 2025 data
forecast_2025 = {
    1: 30.3, 2: 19.1, 3: 22.1, 4: 22.6, 5: 18.2, 6: 19.1,
    7: 15.2, 8: 15.3, 9: 13.9, 10: 24.3, 11: 25.6, 12: 28.1
}

# 2. DASHBOARD CH√çNH v·ªõi 12 plots
fig = plt.figure(figsize=(24, 30))
fig.suptitle('üåç DASHBOARD D·ª∞ B√ÅO CH·∫§T L∆Ø·ª¢NG KH√îNG KH√ç TP.HCM 2025\nD·ª±a tr√™n d·ªØ li·ªáu 02/2021 - 06/2022 (52,548 ph√©p ƒëo)', 
             fontsize=20, fontweight='bold', y=0.98)

# PLOT 1: T·ªïng quan th·ªëng k√™
ax1 = plt.subplot(4, 3, 1)
overview_stats = [
    ['T·ªïng s·ªë b·∫£n ghi', f"{len(df):,}"],
    ['Th·ªùi gian d·ªØ li·ªáu', '02/2021 - 06/2022'],
    ['S·ªë tr·∫°m ƒëo', f"{df['Station_No'].nunique()}"],
    ['PM2.5 TB l·ªãch s·ª≠', f"{df['PM2.5'].mean():.1f} Œºg/m¬≥"],
    ['PM2.5 TB d·ª± b√°o 2025', f"{np.mean(list(forecast_2025.values())):.1f} Œºg/m¬≥"],
    ['M·ª©c AQI nƒÉm 2025', 'Trung b√¨nh']
]

for i, (label, value) in enumerate(overview_stats):
    ax1.text(0.05, 0.9 - i*0.15, f"{label}:", fontweight='bold', transform=ax1.transAxes, fontsize=11)
    ax1.text(0.6, 0.9 - i*0.15, value, transform=ax1.transAxes, fontsize=11)

ax1.set_xlim(0, 1)
ax1.set_ylim(0, 1)
ax1.axis('off')
ax1.set_title('üìä T·ªîNG QUAN D·ª∞ √ÅN', fontweight='bold', fontsize=12)

# PLOT 2: Xu h∆∞·ªõng PM2.5 l·ªãch s·ª≠
ax2 = plt.subplot(4, 3, 2)
monthly_pm25 = df.groupby([df['datetime'].dt.year, df['datetime'].dt.month])['PM2.5'].mean()
dates = [datetime(year, month, 1) for (year, month) in monthly_pm25.index]
ax2.plot(dates, monthly_pm25.values, 'o-', linewidth=2, markersize=6, color='blue', label='D·ªØ li·ªáu l·ªãch s·ª≠')
ax2.set_title('üìà Xu h∆∞·ªõng PM2.5 l·ªãch s·ª≠', fontweight='bold')
ax2.set_ylabel('PM2.5 (Œºg/m¬≥)')
ax2.grid(True, alpha=0.3)
ax2.legend()

# PLOT 3: D·ª± b√°o 2025 theo th√°ng
ax3 = plt.subplot(4, 3, 3)
months = list(range(1, 13))
month_names = ['T1','T2','T3','T4','T5','T6','T7','T8','T9','T10','T11','T12']
forecast_values = list(forecast_2025.values())
colors = ['red' if x > 25 else 'yellow' if x > 20 else 'green' for x in forecast_values]
bars = ax3.bar(months, forecast_values, color=colors, alpha=0.7)
ax3.set_title('üîÆ D·ª± b√°o theo th√°ng nƒÉm 2025', fontweight='bold')
ax3.set_ylabel('PM2.5 (Œºg/m¬≥)')
ax3.set_xlabel('Th√°ng')
ax3.set_xticks(months)
ax3.set_xticklabels(month_names)
ax3.grid(True, alpha=0.3, axis='y')

# Th√™m nh√£n gi√° tr·ªã l√™n c·ªôt
for bar, val in zip(bars, forecast_values):
    ax3.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.5, 
             f'{val:.1f}', ha='center', va='bottom', fontsize=9)

# PLOT 4: So s√°nh c√°c tr·∫°m
ax4 = plt.subplot(4, 3, 4)
station_stats = df.groupby('Station_No')['PM2.5'].agg(['mean', 'std']).reset_index()
station_info = {
    1: "Q1-Th∆∞∆°ng m·∫°i", 2: "Q7-C√¥ng nghi·ªáp", 3: "Th·ªß ƒê·ª©c-Giao th√¥ng",
    4: "Q3-D√¢n c∆∞", 5: "B√¨nh Th·∫°nh-H·ªón h·ª£p", 6: "Q9-Ngo·∫°i th√†nh"
}

bars = ax4.bar(station_stats['Station_No'], station_stats['mean'], 
               yerr=station_stats['std'], capsize=5, alpha=0.7,
               color=['red' if x > 25 else 'yellow' if x > 20 else 'green' for x in station_stats['mean']])
ax4.set_title('üè¢ PM2.5 trung b√¨nh theo tr·∫°m', fontweight='bold')
ax4.set_ylabel('PM2.5 (Œºg/m¬≥)')
ax4.set_xlabel('Tr·∫°m ƒëo')
ax4.set_xticks(station_stats['Station_No'])
ax4.set_xticklabels([f"Tr·∫°m {i}" for i in station_stats['Station_No']])
ax4.grid(True, alpha=0.3, axis='y')

# PLOT 5: Ph√¢n b·ªë m·ª©c AQI
ax5 = plt.subplot(4, 3, 5)
aqi_counts = df['AQI_Level'].value_counts()
aqi_order = ['T·ªët', 'Trung b√¨nh', 'K√©m', 'Nguy h·∫°i']
aqi_counts = aqi_counts.reindex(aqi_order, fill_value=0)
colors_aqi = ['green', 'yellow', 'orange', 'red']
wedges, texts, autotexts = ax5.pie(aqi_counts.values, labels=aqi_counts.index, 
                                   colors=colors_aqi, autopct='%1.1f%%', startangle=90)
ax5.set_title('üéØ Ph√¢n b·ªë m·ª©c AQI l·ªãch s·ª≠', fontweight='bold')

# PLOT 6: Ma tr·∫≠n t∆∞∆°ng quan
ax6 = plt.subplot(4, 3, 6)
numeric_cols = ['PM2.5', 'TSP', 'O3', 'CO', 'NO2', 'SO2', 'Temperature', 'Humidity']
col_names_vn = ['PM2.5', 'TSP', 'O3', 'CO', 'NO2', 'SO2', 'Nhi·ªát ƒë·ªô', 'ƒê·ªô ·∫©m']
correlation_matrix = df[numeric_cols].corr()
correlation_matrix.columns = col_names_vn
correlation_matrix.index = col_names_vn
sns.heatmap(correlation_matrix, annot=True, cmap='RdYlBu_r', center=0, 
            square=True, fmt='.2f', ax=ax6, cbar_kws={'shrink': 0.8})
ax6.set_title('üîó Ma tr·∫≠n t∆∞∆°ng quan', fontweight='bold')

# PLOT 7: M·∫´u theo m√πa
ax7 = plt.subplot(4, 3, 7)
seasonal_pattern = df.groupby(df['datetime'].dt.month)['PM2.5'].mean()
ax7.plot(seasonal_pattern.index, seasonal_pattern.values, 'o-', 
         linewidth=2, markersize=8, color='purple', label='M·∫´u l·ªãch s·ª≠')
ax7.plot(months, forecast_values, 's--', 
         linewidth=2, markersize=8, color='red', label='D·ª± b√°o 2025')
ax7.set_title('üçÇ Ph√¢n t√≠ch m·∫´u theo m√πa', fontweight='bold')
ax7.set_ylabel('PM2.5 (Œºg/m¬≥)')
ax7.set_xlabel('Th√°ng')
ax7.set_xticks(months)
ax7.set_xticklabels(month_names)
ax7.legend()
ax7.grid(True, alpha=0.3)

# PLOT 8: M·∫´u theo gi·ªù
ax8 = plt.subplot(4, 3, 8)
hourly_pattern = df.groupby(df['datetime'].dt.hour)['PM2.5'].mean()
ax8.plot(hourly_pattern.index, hourly_pattern.values, 'o-', linewidth=2, color='orange')
ax8.set_title('üïê M·∫´u h√†ng ng√†y (trung b√¨nh theo gi·ªù)', fontweight='bold')
ax8.set_ylabel('PM2.5 (Œºg/m¬≥)')
ax8.set_xlabel('Gi·ªù trong ng√†y')
ax8.grid(True, alpha=0.3)

# PLOT 9: Nhi·ªát ƒë·ªô vs PM2.5
ax9 = plt.subplot(4, 3, 9)
sample_data = df.sample(n=min(5000, len(df)))
scatter = ax9.scatter(sample_data['Temperature'], sample_data['PM2.5'], 
                     c=sample_data['Humidity'], cmap='viridis', alpha=0.6, s=10)
ax9.set_title('üå°Ô∏è Nhi·ªát ƒë·ªô vs PM2.5 (m√†u theo ƒë·ªô ·∫©m)', fontweight='bold')
ax9.set_xlabel('Nhi·ªát ƒë·ªô (¬∞C)')
ax9.set_ylabel('PM2.5 (Œºg/m¬≥)')
plt.colorbar(scatter, ax=ax9, label='ƒê·ªô ·∫©m (%)')

# PLOT 10: Kho·∫£ng tin c·∫≠y d·ª± b√°o
ax10 = plt.subplot(4, 3, 10)
forecast_vals = list(forecast_2025.values())
std_error = df['PM2.5'].std() / 2
upper_bound = [f + std_error for f in forecast_vals]
lower_bound = [max(0, f - std_error) for f in forecast_vals]

ax10.plot(months, forecast_vals, 'b-', linewidth=3, label='D·ª± b√°o 2025')
ax10.fill_between(months, lower_bound, upper_bound, alpha=0.3, color='blue', label='Kho·∫£ng tin c·∫≠y')
ax10.set_title('üìä D·ª± b√°o 2025 v·ªõi kho·∫£ng tin c·∫≠y', fontweight='bold')
ax10.set_ylabel('PM2.5 (Œºg/m¬≥)')
ax10.set_xlabel('Th√°ng')
ax10.set_xticks(months)
ax10.set_xticklabels(month_names)
ax10.legend()
ax10.grid(True, alpha=0.3)

# PLOT 11: Hi·ªáu su·∫•t m√¥ h√¨nh
ax11 = plt.subplot(4, 3, 11)
models = ['Random Forest\n(H·ªìi quy)', 'H·ªìi quy tuy·∫øn t√≠nh', 'Random Forest\n(Ph√¢n lo·∫°i)']
scores = [0.89, 0.75, 0.94]
colors_model = ['green', 'blue', 'orange']
bars = ax11.bar(models, scores, color=colors_model, alpha=0.7)
ax11.set_title('ü§ñ Hi·ªáu su·∫•t m√¥ h√¨nh', fontweight='bold')
ax11.set_ylabel('ƒêi·ªÉm s·ªë')
ax11.set_ylim(0, 1)
ax11.grid(True, alpha=0.3, axis='y')

for bar, score in zip(bars, scores):
    ax11.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.02, 
              f'{score:.2f}', ha='center', va='bottom', fontweight='bold')

# PLOT 12: ƒê√°nh gi√° r·ªßi ro s·ª©c kh·ªèe
ax12 = plt.subplot(4, 3, 12)
forecast_aqi_levels = [get_aqi_level(pm25) for pm25 in forecast_2025.values()]
aqi_2025_counts = pd.Series(forecast_aqi_levels).value_counts()

health_risks = {
    'T·ªët': 'R·ªßi ro th·∫•p', 'Trung b√¨nh': 'R·ªßi ro v·ª´a', 
    'K√©m': 'R·ªßi ro cao', 'Nguy h·∫°i': 'R·ªßi ro r·∫•t cao'
}

risk_data = []
for aqi_level, count in aqi_2025_counts.items():
    risk_data.append([aqi_level, health_risks[aqi_level], count])

for i, (aqi, risk, months) in enumerate(risk_data):
    color = {'T·ªët': 'green', 'Trung b√¨nh': 'yellow', 'K√©m': 'orange', 'Nguy h·∫°i': 'red'}[aqi]
    ax12.barh(i, months, color=color, alpha=0.7)
    ax12.text(months/2, i, f'{aqi}\n{risk}\n{months} th√°ng', 
              ha='center', va='center', fontweight='bold', fontsize=9)

ax12.set_title('‚öïÔ∏è ƒê√°nh gi√° r·ªßi ro s·ª©c kh·ªèe 2025', fontweight='bold')
ax12.set_xlabel('S·ªë th√°ng')
ax12.set_yticks(range(len(risk_data)))
ax12.set_yticklabels([f'{rd[0]}' for rd in risk_data])
ax12.grid(True, alpha=0.3, axis='x')

plt.tight_layout()
plt.savefig('comprehensive_dashboard.png', dpi=300, bbox_inches='tight')
plt.show()

print(f"\n‚úÖ DASHBOARD T·ªîNG H·ª¢P HO√ÄN TH√ÄNH!")
print(f"üíæ ƒê√£ l∆∞u d∆∞·ªõi d·∫°ng 'comprehensive_dashboard.png'")