# PH√ÇN T√çCH T√ÅC ƒê·ªòNG S·ª®C KH·ªéE - CH·∫§T L∆Ø·ª¢NG KH√îNG KH√ç TP.HCM
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

print("=== PH√ÇN T√çCH T√ÅC ƒê·ªòNG S·ª®C KH·ªéE V√Ä ƒê·ªÄ XU·∫§T CH√çNH S√ÅCH ===")

# 1. Load d·ªØ li·ªáu v√† setup
df = pd.read_csv("HealthyAir_HCMC.csv")
df['datetime'] = pd.to_datetime(df['date'], format='%d-%m-%Y %H:%M')

# Health impact functions v·ªõi ti·∫øng Vi·ªát
def get_aqi_level(pm25):
    if pm25 <= 12: return "T·ªët"
    elif pm25 <= 35.4: return "Trung b√¨nh"
    elif pm25 <= 55.4: return "K√©m"
    else: return "Nguy h·∫°i"

def get_health_risk(pm25):
    if pm25 <= 12: return "R·ªßi ro th·∫•p"
    elif pm25 <= 35.4: return "R·ªßi ro trung b√¨nh"
    elif pm25 <= 55.4: return "R·ªßi ro cao"
    else: return "R·ªßi ro r·∫•t cao"

# T·∫°o health analysis v·ªõi ti·∫øng Vi·ªát
df['AQI_Level'] = df['PM2.5'].apply(get_aqi_level)
df['Health_Risk'] = df['PM2.5'].apply(get_health_risk)

# D·ª± b√°o 2025
forecast_2025 = {
    1: 30.3, 2: 19.1, 3: 22.1, 4: 22.6, 5: 18.2, 6: 19.1,
    7: 15.2, 8: 15.3, 9: 13.9, 10: 24.3, 11: 25.6, 12: 28.1
}

# Health Visualization v·ªõi text ti·∫øng Vi·ªát
fig, axes = plt.subplots(2, 3, figsize=(18, 12))
fig.suptitle('PH√ÇN T√çCH T√ÅC ƒê·ªòNG S·ª®C KH·ªéE - CH·∫§T L∆Ø·ª¢NG KH√îNG KH√ç TP.HCM', fontsize=16, fontweight='bold')

# Plot 1: R·ªßi ro s·ª©c kh·ªèe theo tr·∫°m
ax1 = axes[0, 0]
station_pm25 = df.groupby('Station_No')['PM2.5'].mean()
station_info = {
    1: "Q1-Th∆∞∆°ng m·∫°i", 2: "Q7-C√¥ng nghi·ªáp", 3: "Th·ªß ƒê·ª©c-Giao th√¥ng",
    4: "Q3-D√¢n c∆∞", 5: "B√¨nh Th·∫°nh-H·ªón h·ª£p", 6: "Q9-Ngo·∫°i th√†nh"
}
station_labels = [f"Tr·∫°m {i}\n{station_info[i].split('-')[1]}" for i in station_pm25.index]
colors = ['red' if x > 25 else 'orange' if x > 20 else 'yellow' if x > 15 else 'green' 
          for x in station_pm25.values]
bars = ax1.bar(range(len(station_pm25)), station_pm25.values, color=colors)
ax1.set_title('R·ªßi ro s·ª©c kh·ªèe theo khu v·ª±c tr·∫°m ƒëo')
ax1.set_ylabel('PM2.5 (Œºg/m¬≥)')
ax1.set_xticks(range(len(station_pm25)))
ax1.set_xticklabels(station_labels, rotation=45, fontsize=9)
ax1.grid(True, alpha=0.3, axis='y')

# Plot 2: Nh√≥m d√¢n s·ªë d·ªÖ b·ªã t·ªïn th∆∞∆°ng
ax2 = axes[0, 1]
vuln_groups = ['Tr·∫ª em\n(0-14 tu·ªïi)', 'Ng∆∞·ªùi cao tu·ªïi\n(65+ tu·ªïi)', 
               'B·ªánh nh√¢n\nh√¥ h·∫•p', 'B·ªánh nh√¢n\ntim m·∫°ch']
vuln_deaths = [2500, 1800, 3200, 2800]  # V√≠ d·ª• s·ªë li·ªáu
ax2.bar(range(len(vuln_groups)), vuln_deaths, color=['red', 'orange', 'darkred', 'purple'])
ax2.set_title('S·ªë ca t·ª≠ vong d∆∞ th·ª´a theo nh√≥m d·ªÖ b·ªã t·ªïn th∆∞∆°ng')
ax2.set_ylabel('∆Ø·ªõc t√≠nh s·ªë ca t·ª≠ vong/nƒÉm')
ax2.set_xticks(range(len(vuln_groups)))
ax2.set_xticklabels(vuln_groups, rotation=0, fontsize=9)

# Plot 3: M·∫´u r·ªßi ro s·ª©c kh·ªèe theo m√πa
ax3 = axes[0, 2]
monthly_pm25 = df.groupby(df['datetime'].dt.month)['PM2.5'].mean()
month_names = ['T1','T2','T3','T4','T5','T6','T7','T8','T9','T10','T11','T12']
month_colors = ['red' if x > 25 else 'orange' if x > 20 else 'yellow' if x > 15 else 'green' 
                for x in monthly_pm25.values]
ax3.bar(monthly_pm25.index, monthly_pm25.values, color=month_colors)
ax3.set_title('M·∫´u r·ªßi ro s·ª©c kh·ªèe theo m√πa')
ax3.set_ylabel('PM2.5 (Œºg/m¬≥)')
ax3.set_xlabel('Th√°ng')
ax3.set_xticks(monthly_pm25.index)
ax3.set_xticklabels([month_names[i-1] for i in monthly_pm25.index], rotation=0)
ax3.grid(True, alpha=0.3, axis='y')

# Plot 4: Ph√¢n b·ªï t√°c ƒë·ªông kinh t·∫ø
ax4 = axes[1, 0]
econ_categories = ['Chi ph√≠ t·ª≠ vong\nd∆∞ th·ª´a', 'Chi ph√≠\ny t·∫ø', 'M·∫•t nƒÉng su·∫•t\nlao ƒë·ªông']
econ_values = [60, 25, 15]  # Ph·∫ßn trƒÉm
ax4.pie(econ_values, labels=econ_categories, autopct='%1.1f%%', startangle=90)
ax4.set_title('Ph√¢n b·ªï t√°c ƒë·ªông kinh t·∫ø\n(% t·ªïng chi ph√≠/nƒÉm)')

# Plot 5: D·ª± b√°o r·ªßi ro s·ª©c kh·ªèe 2025
ax5 = axes[1, 1]
forecast_months = list(range(1, 13))
forecast_pm25_values = list(forecast_2025.values())
forecast_colors = ['red' if x > 25 else 'orange' if x > 20 else 'yellow' if x > 15 else 'green' 
                  for x in forecast_pm25_values]
ax5.bar(forecast_months, forecast_pm25_values, color=forecast_colors)
ax5.set_title('D·ª± b√°o r·ªßi ro s·ª©c kh·ªèe nƒÉm 2025')
ax5.set_ylabel('PM2.5 (Œºg/m¬≥)')
ax5.set_xlabel('Th√°ng nƒÉm 2025')
ax5.set_xticks(forecast_months)
ax5.set_xticklabels([month_names[i-1] for i in forecast_months], rotation=0)
ax5.grid(True, alpha=0.3, axis='y')

# Plot 6: So s√°nh ph√¢n b·ªë r·ªßi ro s·ª©c kh·ªèe
ax6 = axes[1, 2]
risk_levels = ['T·ªët', 'Trung b√¨nh', 'K√©m', 'Nguy h·∫°i']
historical_risk_counts = [df[df['AQI_Level'] == level].shape[0] for level in risk_levels]
forecast_risk_counts = [sum(1 for pm25 in forecast_2025.values() if get_aqi_level(pm25) == level) 
                       for level in risk_levels]

x = np.arange(len(risk_levels))
width = 0.35
ax6.bar(x - width/2, historical_risk_counts, width, label='D·ªØ li·ªáu l·ªãch s·ª≠', alpha=0.8)
ax6.bar(x + width/2, forecast_risk_counts, width, label='D·ª± b√°o 2025', alpha=0.8)
ax6.set_title('So s√°nh ph√¢n b·ªë r·ªßi ro s·ª©c kh·ªèe')
ax6.set_ylabel('S·ªë l∆∞·ª£ng')
ax6.set_xticks(x)
ax6.set_xticklabels(risk_levels, rotation=0)
ax6.legend()

plt.tight_layout()
plt.savefig('health_impact_analysis.png', dpi=300, bbox_inches='tight')
plt.show()

print(f"\n‚úÖ PH√ÇN T√çCH T√ÅC ƒê·ªòNG S·ª®C KH·ªéE HO√ÄN TH√ÄNH!")
print(f"üíæ Bi·ªÉu ƒë·ªì ƒë√£ l∆∞u d∆∞·ªõi d·∫°ng 'health_impact_analysis.png'")